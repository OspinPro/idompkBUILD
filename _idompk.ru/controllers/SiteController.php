<?php

namespace app\controllers;

use app\models\Contacts;
use app\models\FilterItem;
use app\models\Projects;
use app\models\SitePages;
use PhpMyAdmin\Url;
use yii\data\Pagination;
use yii\helpers\HtmlPurifier;
use yii\helpers\Json;
use yii\web\Controller;
use yii\web\Session;
use yii\web\UploadedFile;
use yii\widgets\LinkPager;


class SiteController extends Controller
{
    public function actions()
    {
        $this->enableCsrfValidation = false;
        return parent::actions(); // TODO: Change the autogenerated stub
    }

    public function actionMap()
    {
        $urls = array();

        $projectpages = Projects::find()->all();
        foreach ($projectpages as $projectpage) {
            $urls[] = array(
                \Yii::$app->urlManager->createUrl(
                    ['/catalog/proekty-domov/' . $projectpage->num_pr])
            , 'weekly', '0.5'
            );
        }

        $lppages = FilterItem::find()->all();
        foreach ($lppages as $lppage) {
            $urls[] = array(
                \Yii::$app->urlManager->createUrl(
                    ['/catalog/proekty-domov/' . $lppage->url])
            , 'weekly', '0.7'
            );
        }


        $infos = SitePages::find()->all();
        foreach ($infos as $info) {
            $urls[] = array(
                \Yii::$app->urlManager->createUrl(
                    ['/' . $info->link_url])
            , 'weekly', '0.8'
            );
        }

        $xml_sitemap = $this->renderPartial('map', array(
            'host' => \Yii::$app->request->hostInfo,
            'urls' => $urls,
        ));
        \Yii::$app->response->format = \yii\web\Response::FORMAT_XML;
        echo $xml_sitemap;
    }

    public function actionIndex()
    {
        if ($_SERVER['REQUEST_URI'] == '/site')
            return $this->redirect('/');

        $projectsSlider = Projects::getForSlider();

        $homeLinks = FilterItem::find()->select(['url'])->where(['is_show_page_home' => 1])->asArray()->all();

        foreach ($homeLinks as $hLink) {
            $filter = FilterItem::find()->where(['url' => $hLink['url']])->asArray()->one();

            if ($filter) {
                $filter['dop'] = explode(',', $filter['dop']);
                $filter['dopInfo'] = explode(',', $filter['dopInfo']);
                if ($filter['eta'])
                    $filter['eta'] = explode(',', $filter['eta']);
                if ($filter['erker'])
                    $filter['erker'] = explode(',', $filter['erker']);
                if ($filter['garaj'])
                    $filter['garaj'] = explode(',', $filter['garaj']);
                if ($filter['spalni']) {
                    $spalni = $filter['spalni'];
                    unset($filter['spalni']);
                    $filter['spalni'][] = $spalni;
                }
                if ($filter['zanuzel']) {
                    $zanuzel = $filter['zanuzel'];
                    unset($filter['zanuzel']);
                    $filter['zanuzel'][] = $zanuzel;
                }
                $session = new Session();
                $session->open();
                $session['projects_' . $hLink['url']] = serialize($filter);
            }
        }

        return $this->render('index', ['projectsSlider' => $projectsSlider]);
    }

    public function actionError()
    {
        \Yii::$app->params['isError'] = true;
        return $this->render('error');
    }

    public function actionSet_pr()
    {

        $name_filter = $_POST['name_filter'];
        \Yii::$app->params['name_filter'] = $name_filter;
        $session = new Session();
        $session->open();
        $filter = unserialize($session['projects_' . $name_filter]);
//        if (isset($_POST['demo'])) {
//            //$session['projects_'.$name_filter] = serialize($_GET);
//            var_dump($session, $session['projects_' . $name_filter]);
//            //$session->close();
//            exit;
//        }
        foreach ($_POST as $key => $val) {
            if ($val == "all_reset")
                unset($filter[$key]);
            else
                $filter[$key] = $val;
        }

        $session['projects_' . $name_filter] = serialize($filter);

        $projects = Projects::Get_projects();
        $res = '';
        foreach ($projects['projects'] as $rec)
            $res .= '<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6 col-xl-4 idom-projects-item">' . $this->renderPartial('@app/modules/catalog/views/proekty-domov/block', ['rec' => $rec]) . '</div>';

        $next = 20;

        unset($_POST);
        $_POST['page'] = 1;
        $pages = new Pagination(['totalCount' => $projects['count'], 'pageSize' => 20]);
        $pages->pageSizeParam = false;
        $pages_link = LinkPager::widget([
            'pagination' => $pages,
            ///'route' => '/proekty-domov/index',
            'options' => [
                'class' => '',
            ],
            'prevPageLabel' => 'Назад',
            'nextPageLabel' => 'Вперед',
        ]);
        $pages_link = str_replace("/site/set_pr", "/catalog/proekty-domov/index", $pages_link);

        if (($projects['count'] - count($projects['projects'])) < 20)
            $next = ($projects['count'] - count($projects['projects']));
        return json_encode(['status' => 'ok', 'res' => $res, 'total' => $pages->totalCount, 'all' => ($projects['count'] - count($projects['projects'])), 'limit' => count($projects['projects']) + 20, 'next' => $next,
            'pages_link' => $pages_link]);
    }

    public function actionSet_pr2()
    {
        $name_filter = $_GET['name_filter'];
        $limit = $_GET['limit'];
        \Yii::$app->params['name_filter'] = $name_filter;
        $session = new Session();
        $session->open();
        $filter = unserialize($session['projects_' . $name_filter]);

        /*var_dump($session['projects_'.$name_filter]);
        exit(1);*/
        foreach ($_GET as $key => $val) {
            if ($val == "all_reset")
                unset($filter[$key]);
            else
                $filter[$key] = $val;
        }

        $next = intval($limit);

        if (!$limit) {
            $limit = count($projects['projects']) + 20;
            $next = 20;
        }

        $session['projects_' . $name_filter] = serialize($filter);

        $projects = Projects::Get_projects($limit = $next);
        $res = '';
        foreach ($projects['projects'] as $rec)
            $res .= '<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6 col-xl-4 idom-projects-item">' . $this->renderPartial('@app/modules/catalog/views/proekty-domov/block', ['rec' => $rec]) . '</div>';


        unset($_GET);
        $_GET['page'] = 1;
        $pages = new Pagination(['totalCount' => $projects['count'], 'pageSize' => intval($limit)]);
        $pages->pageSizeParam = false;
        $pages_link = LinkPager::widget([
            'pagination' => $pages,
            ///'route' => '/proekty-domov/index',
            'options' => [
                'class' => '',
            ],
            'prevPageLabel' => 'Назад',
            'nextPageLabel' => 'Вперед',
        ]);
        $pages_link = str_replace("/site/set_pr", "/catalog/proekty-domov/index", $pages_link);


        if (($projects['count'] - count($projects['projects'])) < 20)
            $next = ($projects['count'] - count($projects['projects']));

        $newAll = 18;
        if (!$limit) {
            $newAll = ($projects['count'] - count($projects['projects']));
        }

        return json_encode(['status' => 'ok', 'res' => $res, 'total' => $pages->totalCount, 'all' => $newAll, 'limit' => intval($limit), 'next' => $next,
            'pages_link' => $pages_link]);
    }

    public function actionGet_is_pr($name)
    {
        $rec = Projects::find()->where(['num_pr' => $name])->asArray()->one();
        if ($rec)
            return Json::encode(['rec' => '/catalog/proekty-domov/' . $rec['num_pr']]);
        else
            return Json::encode(['rec' => false]);
    }

    public function actionGet_pr($limit)
    {
        $name_filter = $_GET['name_filter'];
        \Yii::$app->params['name_filter'] = $name_filter;
        $projects = Projects::Get_projects($limit);
        $res = '';
        foreach ($projects['projects'] as $rec)
            $res .= '<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6 col-xl-4 idom-projects-item">' . $this->renderPartial('@app/modules/catalog/views/proekty-domov/block', ['rec' => $rec]) . '</div>';
        $next = 20;
        if (($projects['count'] - count($projects['projects'])) < 20)
            $next = ($projects['count'] - count($projects['projects']));
        unset($_GET['limit']);
        $_GET['page'] = ceil($limit / 20);
        $pages = new Pagination(['totalCount' => $projects['count'], 'pageSize' => 20]);
        $pages->pageSizeParam = false;
        $pages_link = LinkPager::widget([
            'pagination' => $pages,
            ///'route' => '/proekty-domov/index',
            'options' => [
                'class' => '',
            ],
            'prevPageLabel' => 'Назад',
            'nextPageLabel' => 'Вперед',
        ]);
        $pages_link = str_replace("/site/get_pr", "/catalog/proekty-domov/index", $pages_link);

        return json_encode(['status' => 'ok', 'res' => $res, 'all' => ($projects['count'] - count($projects['projects'])), 'limit' => count($projects['projects']) + 20, 'next' => $next,
            'pages_link' => $pages_link]);
    }

    public function actionFinder($term)
    {

        $pr = [];
        foreach (Projects::find()->filterWhere(['LIKE', 'num_pr', $term])->limit(20)->asArray()->all() as $rc_s) {
            $pr[] = [
                "value" => $rc_s['num_pr'],
                "label" => $rc_s['num_pr'],
                "url" => '/catalog/proekty-domov/' . $rc_s['num_pr'],
                "img" => '/img/uploads/projects/thumb/' . unserialize($rc_s['images'])[0]
            ];
        };


        return Json::encode($pr);
    }

    public function actionPdf($name)
    {
        $rec = Projects::find()->where(['num_pr' => $name])->asArray()->one();
        $contacts = \app\models\Contacts::find()->asArray()->one();

        $mpdf = new \mPDF();
        $mpdf->WriteHTML($this->renderPartial('@app/modules/catalog/views/proekty-domov/pdf', ['rec' => $rec, 'contacts' => $contacts]));
        $mpdf->Output();
        exit;
    }

    function reArrayFiles(&$file_post)
    {

        $file_ary = array();
        $file_count = count($file_post['name']);
        $file_keys = array_keys($file_post);

        for ($i = 0; $i < $file_count; $i++) {
            foreach ($file_keys as $key) {
                $file_ary[$i][$key] = $file_post[$key][$i];
            }
        }

        return $file_ary;
    }

    public function actionAdd_cart($id, $ze = false, $ps = false, $pu = false, $pdf = false, $ovk = false, $copy = 0)
    {
        $ids = [];
        if ($_COOKIE['ids_cart'])
            $ids = json_decode($_COOKIE['ids_cart'], true);
        if ($ids[$id]) {
            unset($ids[$id]);
        } else
            $ids[$id] = ['id' => $id, 'ze' => $ze, 'ps' => $ps, 'pu' => $pu, 'pdf' => $pdf, 'ovk' => $ovk, 'copy' => $copy];
        setcookie("ids_cart", json_encode($ids), time() + 60 * 60 * 24 * 365, '/', $_SERVER['SERVER_NAME']);

        return json_encode(['status' => $ids[$id] ? 'ok' : 'remove', 'count' => count($ids)]);
    }

    public function actionDel_cart($id, $ze = false, $ps = false, $pu = false, $pdf = false, $ovk = false, $copy = 0)
    {
        $ids = [];
        if ($_COOKIE['ids_cart']) {
            $ids = json_decode($_COOKIE['ids_cart'], true);
            unset($ids[$id]);
        }
        setcookie("ids_cart", json_encode($ids), time() + 60 * 60 * 24 * 365, '/', $_SERVER['SERVER_NAME']);
        return $this->redirect('/order');
    }

    public function actionForm_send_our()
    {
        $company_setting = Contacts::find()->asArray()->one();

        $userName = $_POST['idom_js_form_send_us__name'];
        $userPhone = $_POST['idom_js_form_send_us__phone'];
        $userEmail = $_POST['idom_js_form_send_us__email'];
        $userMessage = $_POST['idom_js_form_send_us__message'];

        if (!empty($userName) || !empty($userPhone)) {

            $buffer = $this->renderPartial("@app/views/templateMail/form_send_us",
                array(
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "userName" => $_POST['idom_js_form_send_us__name'],
                    "userPhone" => $_POST['idom_js_form_send_us__phone'],
                    "userEmail" => $_POST['idom_js_form_send_us__email'],
                    "userMessage" => $_POST['idom_js_form_send_us__message'],
                    "formName" => $_POST['idom_js_form_send_us__form'],
                    true)
            );

            if (!empty($_FILES['idom_js_form_send_us__file']['tmp_name'])) {
                $msg = \Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    //->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_send_us__name']])
                    ->setSubject($_POST['idom_js_form_send_us__form'])
                    ->setHtmlBody($buffer);
                foreach (UploadedFile::getInstancesByName('idom_js_form_send_us__file') as $Record) {
                    $NewName = time() . '-' . mt_rand() . '.' . $Record->extension;
                    $Record->saveAs('temp/' . $NewName);
                    $msg->attach('temp/' . $NewName);
                }

                if ($msg->send()) {
                    return json_encode(['status' => "ok"]);
                }
            } else {
                if (\Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    //->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_send_us__name']])
                    ->setSubject($_POST['idom_js_form_send_us__form'])
                    ->setHtmlBody($buffer)
                    ->send()) {
                    return json_encode(['status' => "ok"]);
                }
            }

            return json_encode(['status' => "error"]);
        }
    }

    public function actionForm_callback()
    {
        $company_setting = Contacts::find()->asArray()->one();

        $userPhone = $_POST['idom_js_form_callback__phone'];

        if (!empty($userPhone)) {

            if ($_POST) {
                $buffer = $this->renderPartial("@app/views/templateMail/form_callback",
                    array(
                        "companyName" => $company_setting['c_company_name'],
                        "companyAdress" => $company_setting['c_adress'],
                        "companyEmail" => $company_setting['c_email'],
                        "companyPhone1" => $company_setting['c_phone_1'],
                        "companyPhone2" => $company_setting['c_phone_2'],
                        "userPhone" => $_POST['idom_js_form_callback__phone'],
                        "formName" => $_POST['idom_js_form_callback__form'],
                        true)
                );


                if (\Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    //->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Перезвоните:' . $_POST['idom_js_form_callback__phone']])
                    ->setSubject($_POST['idom_js_form_callback__form'])
                    ->setHtmlBody($buffer)
                    ->send()) {
                    return json_encode(['status' => "ok"]);
                }

            }
            return json_encode(['status' => "error"]);
        }
    }

    public function actionForm_main_0()
    {
        $company_setting = Contacts::find()->asArray()->one();

        $userName = $_POST['idom_js_form_main_0__name'];
        $userPhone = $_POST['idom_js_form_main_0__phone'];
        $userEmail = $_POST['idom_js_form_main_0__email'];
        $userMessage = $_POST['idom_js_form_main_0__message'];

        if (!empty($userName) && !empty($userPhone)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_send_us",
                array(
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "userName" => $_POST['idom_js_form_main_0__name'],
                    "userPhone" => $_POST['idom_js_form_main_0__phone'],
                    "userEmail" => $_POST['idom_js_form_main_0__email'],
                    "userMessage" => $_POST['idom_js_form_main_0__message'],
                    "formName" => $_POST['idom_js_form_main_0__form'],
                    true)
            );

            if (!empty($_FILES['idom_js_form_main_0__file']['tmp_name'])) {
                $msg = \Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    //->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_0__name']])
                    ->setSubject($_POST['idom_js_form_main_0__form'])
                    ->setHtmlBody($buffer);
                foreach (UploadedFile::getInstancesByName('idom_js_form_main_0__file') as $Record) {
                    $NewName = time() . '-' . mt_rand() . '.' . $Record->extension;
                    $Record->saveAs('temp/' . $NewName);
                    $msg->attach('temp/' . $NewName);
                }

                if ($msg->send()) {
                    return json_encode(['status' => "ok"]);
                }
            } else {
                if (\Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    //->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_0__name']])
                    ->setSubject($_POST['idom_js_form_main_0__form'])
                    ->setHtmlBody($buffer)
                    ->send()) {
                    return json_encode(['status' => "ok"]);
                }
            }
            return json_encode(['status' => "error"]);
        }
    }

    public function actionForm_main_1()
    {
        $company_setting = Contacts::find()->asArray()->one();

        $userName = $_POST['idom_js_form_main_1__name'];
        $userPhone = $_POST['idom_js_form_main_1__phone'];
        $userMessage = $_POST['idom_js_form_main_1__message'];

        if (!empty($userName) && !empty($userPhone)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_send_us",
                array(
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "userName" => $_POST['idom_js_form_main_1__name'],
                    "userPhone" => $_POST['idom_js_form_main_1__phone'],
                    "userMessage" => $_POST['idom_js_form_main_1__message'],
                    "formName" => $_POST['idom_js_form_main_1__form'],
                    true)
            );
            if (!empty($_FILES['idom_js_form_main_1__file']['tmp_name'])) {
                $msg = \Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    //->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_1__name']])
                    ->setSubject($_POST['idom_js_form_main_1__form'])
                    ->setHtmlBody($buffer);
                foreach (UploadedFile::getInstancesByName('idom_js_form_main_1__file') as $Record) {
                    $NewName = time() . '-' . mt_rand() . '.' . $Record->extension;
                    $Record->saveAs('temp/' . $NewName);
                    $msg->attach('temp/' . $NewName);
                }
                if ($msg->send()) {
                    return json_encode(['status' => "ok"]);
                }
            } else {
                if (\Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_1__name']])
                    ->setSubject($_POST['idom_js_form_main_1__form'])
                    ->setHtmlBody($buffer)
                    ->send()) {
                    return json_encode(['status' => "ok"]);
                }
            }

        }
        return json_encode(['status' => "error"]);
    }

    public function actionForm_order()
    {

        $company_setting = Contacts::find()->asArray()->one();

        $projects = [];
        $images = [];
        foreach ($_POST['ids'] as $id_pr) {
            $project = Projects::find()->where(['id' => $id_pr])->asArray()->one();
            $projects[] = $project['num_pr'];
            $images[] = $project['images'];
        }
        $userName = $_POST['idom_js_form_order__name'];
        $userPhone = $_POST['idom_js_form_order__phone'];
        $userMail = $_POST['idom_js_form_order__email'];

        if (!empty($userName) && !empty($userPhone) && !empty($userMail)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_order",
                [
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "array" => $_POST,
                    "userName" => $_POST['idom_js_form_order__name'],
                    "userPhone" => $_POST['idom_js_form_order__phone'],
                    "userMail" => $_POST['idom_js_form_order__email'],
                    "userAdress" => $_POST['idom_js_form_order__adress'],
                    "userComment" => $_POST['idom_js_form_order__comments'],
                    "deliveryMethod" => $_POST['project_delivery'],
                    "payMethod" => $_POST['project_pay'],
                    "finalPrice" => $_POST['final_price_str'],
                    "formName" => $_POST['idom_js_form_order__form']
                ]
            );
            setcookie("ids_cart", '', time() + 60 * 60 * 24 * 365, '/', $_SERVER['SERVER_NAME']);
            if (\Yii::$app->mailer->compose()
                ->setTo([$userMail])
                ->setBcc([$company_setting['c_email']])
                ->setFrom(["no-reply@idompk.ru" => $_POST['idom_js_form_order__form']])
                ->setSubject('Купили проект: ' . implode(', ', $projects))
                ->setHtmlBody($buffer)
                ->send()) {
                return json_encode(['status' => "ok"]);
            }
            return json_encode(['status' => "error101"]);
        }
        return json_encode(['status' => "error102"]);
    }

    public function actionForm_send_to_mail()
    {

        $company_setting = Contacts::find()->asArray()->one();

        $project = Projects::find()->where(['id' => $_POST['ids']])->asArray()->one();
        $area = $project['area'];
        $area_tb = $project['area_tb'];
        $shirina_doma = $project['shirina_doma'];
        $dlina_doma = $project['dlina_doma'];
        $spalen = $project['spalen'];
        $zanuzel = $project['zanuzel'];
        $text_ett = '';
        if ($project['cokol'] && $project['mansard'])
            $text_ett = '+ Мансардный + Цокольный';
        else if ($project['pogreb'] && $project['mansard'])
            $text_ett = '+ Мансардный + Погреб';
        else if ($project['cokol'])
            $text_ett = '+ Цокольный';
        else if ($project['mansard'])
            $text_ett = '+ Мансардный';
        else if ($project['pogreb'])
            $text_ett = '+ Погреб';
        $etag = $project['count_et'] . '' . $text_ett;
        $fundament = $project['fundament'];
        $desc_material = $project['desc_material'];
        $perekrytija = $project['perekrytija'];
        $krysha = $project['krysha'];
        $krovlja = $project['krovlja'];
        $fasad = $project['fasad'];
        $stype_pr = \app\models\StylePr::find()->where(['id' => $project['style_pr']])->asArray()->one();
        $filter_pr = \app\models\FilterItem::find()->where(['name' => $stype_pr['name']])->asArray()->one();
        $arh = $filter_pr['name'];
        $dom = '';
        $text_garaj = '';
        if ($project['garaj'] == 1) {
            $text_garaj = 'Гараж (1 место)';
        } else if ($project['garaj'] == 2) {
            $text_garaj = 'Гараж (2 места)';
        } else if ($project['garaj'] == 3) {
            $text_garaj = 'Гараж (3 места)';
        } else if ($project['garaj'] == 4) {
            $text_garaj = 'Гараж (4 места)';
        } else if ($project['garaj'] > 4) {
            $text_garaj = 'Гараж (5+ мест)';
        }
        if ($text_garaj) {
            $dom .= '<span>' . $text_garaj . '</span>, ';
        }
        $text_erker = '';
        if ($project['erker'] == 1) {
            $text_erker = 'Эркер (1 шт.)';
        } else if ($project['erker'] == 2) {
            $text_erker = 'Эркер (2 шт.)';
        } else if ($project['erker'] == 3) {
            $text_erker = 'Эркер (3 шт.)';
        } else if ($project['erker'] == 4) {
            $text_erker = 'Эркер (4 шт.)';
        } else if ($project['erker'] > 4) {
            $text_erker = 'Эркер (5+ шт.)';
        }
        if ($text_erker) {
            $dom .= '<span>' . $text_erker . '</span>, ';
        }
        $dop_rs = explode(',', $project['dop']);
        foreach (\app\models\DopPr::find()->orderBy(['position' => SORT_ASC])->asArray()->all() as $dop) {
            in_array('-' . $dop['id'] . '-', $dop_rs) ? $dom .= '<span>' . $dop['name'] . '</span>, ' : null;
        }
        $razd_pr = $project['razd_pr'];
        $userMail = $_POST['idom_js_form_callback__mail'];

        if (!empty($userMail)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_send_me_project",
                [
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "array" => $_POST,
                    "area" => $area,
                    "area_tb" => $area_tb,
                    "shirina_doma" => $shirina_doma,
                    "dlina_doma" => $dlina_doma,
                    "spalen" => $spalen,
                    "zanuzel" => $zanuzel,
                    "etag" => $etag,
                    "fundament" => $fundament,
                    "desc_material" => $desc_material,
                    "perekrytija" => $perekrytija,
                    "krysha" => $krysha,
                    "krovlja" => $krovlja,
                    "fasad" => $fasad,
                    "arh" => $arh,
                    "dom" => $dom,
                    "razd_pr" => $razd_pr,
                    "formName" => $_POST['idom_js_form_callback__form']
                ]
            );
            setcookie("ids_cart", '', time() + 60 * 60 * 24 * 365, '/', $_SERVER['SERVER_NAME']);
            if (\Yii::$app->mailer->compose()
                ->setTo([$userMail])
                //->setBcc('zoomworld@mail.ru')
                ->setFrom(["no-reply@idompk.ru" => $_POST['idom_js_form_callback__form']])
                ->setSubject($_POST['idom_js_form_callback__form'])
                ->setHtmlBody($buffer)
                ->send()) {
                return json_encode(['status' => "ok"]);
            }
            return json_encode(['status' => "error101"]);
        }
        return json_encode(['status' => "error102"]);
    }

    public function actionForm_ask_project()
    {

        $company_setting = Contacts::find()->asArray()->one();


        $userName = $_POST['idom_js_form_main_1__name'];
        $userPhone = $_POST['idom_js_form_main_1__phone'];
        $userMail = $_POST['idom_js_form_main_1__mail'];
        $userMessage = $_POST['idom_js_form_main_1__message'];

        $userCity = $_POST['idom_js_form_main_1__city'];
        $userArea = $_POST['idom_js_form_main_1__area'];
        $userAreaAddress = $_POST['idom_js_form_main_1__area_address'] ?: '';
        $userAreaTime = $_POST['idom_js_form_main_1__area_time'] ?: '';
        $userBuildTime = $_POST['idom_js_form_main_1__build_time'] ?: '';


        if (!empty($userName) && !empty($userPhone)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_ask_project",
                [
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "array" => $_POST,
                    "userName" => $userName,
                    "userPhone" => $userPhone,
                    "userMail" => $userMail,
                    "userMessage" => $userMessage,
                    "userCity" => $userCity,
                    "userArea" => $userArea,
                    "userAreaAddress" => $userAreaAddress,
                    "userAreaTime" => $userAreaTime,
                    "userBuildTime" => $userBuildTime,
                    "formName" => $_POST['idom_js_form_main_1__form']
                ]
            );
            setcookie("ids_cart", '', time() + 60 * 60 * 24 * 365, '/', $_SERVER['SERVER_NAME']);

            if (!empty($_FILES['idom_js_form_main_1__file']['tmp_name'])) {
                $msg = \Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    ->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_1__name']])
                    ->setSubject($_POST['idom_js_form_main_1__form'])
                    ->setHtmlBody($buffer);
                foreach (UploadedFile::getInstancesByName('idom_js_form_main_1__file') as $Record) {
                    $NewName = time() . '-' . mt_rand() . '.' . $Record->extension;
                    $Record->saveAs('temp/' . $NewName);
                    $msg->attach('temp/' . $NewName);
                }
                if ($msg->send()) {
                    return json_encode(['status' => "ok"]);
                }
            } else {
                if (\Yii::$app->mailer->compose()
                    ->setTo([$company_setting['c_email']])
                    ->setBcc('zoomworld@mail.ru')
                    ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_1__name']])
                    ->setSubject($_POST['idom_js_form_main_1__form'])
                    ->setHtmlBody($buffer)
                    ->send()) {
                    return json_encode(['status' => "ok"]);
                }
            }

            return json_encode(['status' => "error101"]);
        }
        return json_encode(['status' => "error102"]);
    }

    public function actionForm_view_project()
    {

        $company_setting = Contacts::find()->asArray()->one();


        $userName = $_POST['idom_js_form_main_1__name'];
        $userPhone = $_POST['idom_js_form_main_1__phone'];
        $userDate = $_POST['idom_js_form_main_1__date'];
        $userTime = $_POST['idom_js_form_main_1__time'];
        $userRegion = $_POST['idom_js_form_main_1__region'];

        if (!empty($userName) && !empty($userPhone)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_view_project",
                [
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "array" => $_POST,
                    "userName" => $userName,
                    "userPhone" => $userPhone,
                    "userDate" => $userDate,
                    "userTime" => $userTime,
                    "userRegion" => $userRegion,
                    "formName" => $_POST['idom_js_form_main_1__form']
                ]
            );
            setcookie("ids_cart", '', time() + 60 * 60 * 24 * 365, '/', $_SERVER['SERVER_NAME']);
            if (\Yii::$app->mailer->compose()
                ->setTo([$company_setting['c_email']])
                //->setBcc('zoomworld@mail.ru')
                ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_1__name']])
                ->setSubject($_POST['idom_js_form_main_1__form'])
                ->setHtmlBody($buffer)
                ->send()) {
                return json_encode(['status' => "ok"]);
            }
            return json_encode(['status' => "error101"]);
        }
        return json_encode(['status' => "error102"]);
    }

    public function actionForm_credit_project()
    {

        $company_setting = Contacts::find()->asArray()->one();


        $userName = $_POST['idom_js_form_main_1__name'];
        $userPhone = $_POST['idom_js_form_main_1__phone'];
        $userMail = $_POST['idom_js_form_main_1__mail'];
        $userMessage = $_POST['idom_js_form_main_1__message'];

        if (!empty($userName) && !empty($userPhone)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_credit_project",
                [
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    "array" => $_POST,
                    "userName" => $userName,
                    "userPhone" => $userPhone,
                    "userMail" => $userMail,
                    "userMessage" => $userMessage,
                    "formName" => $_POST['idom_js_form_main_1__form'],
                    "allsum" => $_POST['allsum'],
                    "firstsum" => $_POST['firstsum'],
                    "firstprocent" => $_POST['firstprocent'],
                    "year" => $_POST['year'],
                    "yearprocent" => $_POST['yearprocent'],
                    "creditsum" => $_POST['creditsum'],
                    "monthsum" => $_POST['monthsum']

                ]
            );
            setcookie("ids_cart", '', time() + 60 * 60 * 24 * 365, '/', $_SERVER['SERVER_NAME']);
            if (\Yii::$app->mailer->compose()
                ->setTo([$company_setting['c_email']])
                //->setBcc('zoomworld@mail.ru')
                ->setFrom(["no-reply@idompk.ru" => 'IDOMPK - Вам написал: ' . $_POST['idom_js_form_main_1__name']])
                ->setSubject($_POST['idom_js_form_main_1__form'])
                ->setHtmlBody($buffer)
                ->send()) {
                return json_encode(['status' => "ok"]);
            }
            return json_encode(['status' => "error101"]);
        }
        return json_encode(['status' => "error102"]);
    }

    public function actionForm_buy_project()
    {
        $company_setting = Contacts::find()->asArray()->one();
        $project = Projects::find()->where(['num_pr' => $_POST['project_id']])->asArray()->one();

        $userName = $_POST['idom_js_form_main_1__name'];
        $userPhone = $_POST['idom_js_form_main_1__phone'];
        $userMail = $_POST['idom_js_form_main_1__mail'];

        if (!empty($userName) && !empty($userPhone) && !empty($userMail)) {
            $buffer = $this->renderPartial("@app/views/templateMail/form_new_order",
                [
                    "companyName" => $company_setting['c_company_name'],
                    "companyAdress" => $company_setting['c_adress'],
                    "companyEmail" => $company_setting['c_email'],
                    "companyPhone1" => $company_setting['c_phone_1'],
                    "companyPhone2" => $company_setting['c_phone_2'],
                    'project' => $project,
                    'dops' => $_POST['dops'],
                    "array" => $_POST,
                    "userName" => $_POST['idom_js_form_main_1__name'],
                    "userPhone" => $_POST['idom_js_form_main_1__phone'],
                    "userMail" => $_POST['idom_js_form_main_1__mail'],
                    "userAdress" => $_POST['idom_js_form_main_1__address'],
                    "userComment" => $_POST['idom_js_form_main_1__message'],
                    //"deliveryMethod" => $_POST['project_delivery'],
                    //"payMethod" => $_POST['project_pay'],
                    //"finalPrice" => $_POST['final_price_str'],
                    "formName" => $_POST['idom_js_form_main_1__form']
                ]
            );

            $msg = \Yii::$app->mailer->compose()
                ->setTo(['hello@idompk.ru'])
                //->setBcc('zoomworld@mail.ru')
                ->setFrom(["no-reply@idompk.ru" => 'IdomPk'])
                ->setSubject('Купили проект: ' . $project['num_pr'])
                ->setHtmlBody($buffer);

            if (!empty($_FILES['idom_js_form_main_1__file']['tmp_name'][0])) {
                foreach (UploadedFile::getInstancesByName('idom_js_form_main_1__file') as $Record) {
                    $NewName = time() . '-' . mt_rand() . '.' . $Record->extension;
                    $Record->saveAs('temp/' . $NewName);
                    $msg->attach('temp/' . $NewName);
                }
            }

            if ($msg->send()) {
                return json_encode(['status' => "ok"]);
            }
            return json_encode(['status' => "error101"]);
        }
        return json_encode(['status' => "error102"]);
    }

//    Перевод от яндекса
    public function actionToukr()
    {
        exit(1);
        $lines = FilterItem::find()->select(['id', 'name', 'name_ukr', 'text', 'text_ukr', 'title', 'title_ukr', 'description', 'description_ukr', 'text2', 'text2_ukr'])->where(['!=', 'text2', ''])->andWhere(['text2_ukr' => null])->LIMIT(1000)->all();

        if ($lines) {

            foreach ($lines as $line) {

                $item = array(
                    "folderId" => "b1g0c8t0tin17b8afpde",
                    "texts" => array($line->text2),
                    "targetLanguageCode" => "uk",
                    "format" => "HTML"
                );

                $ch2 = curl_init();
                $data_string = json_encode($item);
                curl_setopt($ch2, CURLOPT_URL, 'https://translate.api.cloud.yandex.net/translate/v2/translate');
                curl_setopt($ch2, CURLOPT_POSTFIELDS, $data_string);
                curl_setopt($ch2, CURLOPT_POST, true);
                curl_setopt($ch2, CURLOPT_HTTPHEADER, array(
                        'Authorization: Bearer t1.9euelZqXk87PmZWZyImYxoyPjsmTnu3rnpWamJiOy52KzJPGy8aRmYqTjI3l8_c9F01x-e9nEx98_N3z931FSnH572cTH3z8.IVYroxaI8Is69_rXNKA21aiDprehEy6s9hkVXO65UTg0hqUOjvOMi-wDyB8edElZObClYYlTFItoJLkDsHLfAw',
                        'Content-Type: application/json')
                );
                curl_setopt($ch2, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch2, CURLOPT_TIMEOUT, 30);
                $result2 = curl_exec($ch2);
                $tt = json_decode($result2, true);

                if ($tt['translations'][0]['text'] != '') {
                    $line->text2_ukr = $tt['translations'][0]['text'];
                }

                $line->save(false);
                curl_close($ch2);
            }


            return Json::encode(['status' => 'ok', 'text' => 'Good']);
        } else {
            return Json::encode(['status' => 'error', 'text' => 'Неизвестная ошибка! Обратитесь к промоутеру']);
        }
    }
}